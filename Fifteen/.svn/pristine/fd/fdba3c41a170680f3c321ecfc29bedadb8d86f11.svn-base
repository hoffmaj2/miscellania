import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.InputMismatchException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/**
 This class stores all buttons, frames, panels, and numbers related to the puzzle.
 * When constructed, a new fifteen style puzzle is generated.
 * Almost all key functions to the game are stored and run within this class.
 * 
 * @author Jared Hoffman. Created 30/09/2013.
 */
public class FifteenFrame extends JFrame {

	public int[][] grid;//the board
	private int[][] gridSolved;//what the board looks like when solved
	private ArrayList<Integer> record=new ArrayList<Integer>(); //stores all player-caused shifts as integers to allow the player to undo and redo moves
	private JButton[][] buttons;//list of board tiles, stored as buttons
	private int recordIndex=-1;//used to track undos and redos
	private JPanel interior;//the panel containing the board
	private JPanel menu;//the panel containing the menu buttons
	private JButton resetButton;
	private JButton undoButton;
	private JButton redoButton;
	private JButton changeSizeButton;
	private JButton newPuzzleButton;
	private JButton solveButton;
	private JButton creditsButton;
	private int[][] gridStart;//the starting position of the board
	
	/**
	 * The default constructor: this will create a 4x4 puzzle using the (int,int) constructor.
	 * 
	 */
	public FifteenFrame() {
		this(4,4);
	}
	
	
	/**
	 * This constructor take two parameters to set the dimensions of the game board.
	 * It then proceeds to generate, format the gui for, and randomize a new puzzle of those dimensions.
	 * 
	 * @param rows The number of rows to create.
	 * @param cols The number of columns to create.
	 */
	public FifteenFrame(int rows,int cols) {
		grid=new int[rows][cols];
		gridSolved=new int[rows][cols];
		gridStart=new int[rows][cols];
		for(int i=0;i<rows;i++){
			for(int j=0;j<cols;j++){
				gridSolved[i][j]=i*grid[0].length+j+1;
				grid[i][j]=i*grid[0].length+j+1;
				if(i+j==rows+cols-2){gridSolved[i][j]=0;
				grid[i][j]=0;
				}
			}
		}
		//grid=gridSolved;
		randomize();
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				gridStart[i][j]=grid[i][j];
			}
		}
		this.setSize(new Dimension(800,600));
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("This is a "+rows+"x"+cols+" puzzle. Enjoy!");
		this.setLayout(new BorderLayout());
		buttons=new JButton[grid.length][grid[0].length];
		interior=new JPanel();
		interior.setLayout(new GridLayout(grid.length,grid[0].length));
		interior.setVisible(true);
		menu=new JPanel();
		menu.setLayout(new GridLayout(7,1));
		menu.setVisible(true);
		this.add(menu,BorderLayout.EAST);
		this.add(interior);
		makeAndPlaceButtons();
		this.setVisible(true);
		resetButton=new JButton("reset");
		undoButton=new JButton("undo");
		redoButton=new JButton("redo");
		changeSizeButton=new JButton("resize board");
		newPuzzleButton=new JButton("new puzzle");
		solveButton=new JButton("auto-solve");
		creditsButton=new JButton("credits");
		menu.add(resetButton);
		menu.add(undoButton);
		menu.add(redoButton);
		menu.add(changeSizeButton);
		menu.add(newPuzzleButton);
		menu.add(solveButton);
		menu.add(creditsButton);
		resetButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				reset();
			}
		});
		undoButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				undo();
			}
		});
		redoButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				redo();
			}
		});
		solveButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				solve();
			}
		});
		creditsButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				showCredits();
			}
		});
		newPuzzleButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				randomize();
				for(int i=0;i<grid.length;i++){
					for(int j=0;j<grid[0].length;j++){
						gridStart[i][j]=grid[i][j];
					}
				}
				record=new ArrayList<Integer>();
				recordIndex=-1;
				refresh();
			}
		});
		changeSizeButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				try{
					String numRows = JOptionPane.showInputDialog("How many rows do you want in the new puzzle? (1-20)");
					String numCols = JOptionPane.showInputDialog("How many columns do you want in the new puzzle? (1-20)");
					if(Integer.parseInt(numRows)<2||Integer.parseInt(numCols)<2
							||Integer.parseInt(numCols)>20||Integer.parseInt(numRows)>20){
							throw new Exception("bad things dun just happn'd");
						}
					resizeMe(Integer.parseInt(numRows),Integer.parseInt(numCols));
				}
				catch (InputMismatchException exception){
					printIOError();
				}
				catch (Exception exception){
					printLogicError();
				}
			}
		});
	}

	/**
	 * This method creates a new FifteenFrame of specified rows and columns,
	 *  and then removes the current frame.
	 * 
	 * @param rows The new number of rows to use.
	 * @param cols The new number of columns to use.
	 */
	public void resizeMe(int rows, int cols) {
		FifteenFrame newFrame=new FifteenFrame(rows,cols);
		this.dispose();
	}
	
	
	/**
	 * This method sets each value in grid[][] equal to the corresponding value in gridSolved[][], 
	 * thus displaying the solved state of the board.
	 * 
	 */
	public void solve() {
		for(int i=0;i<grid.length;i++)
		{
			for(int j=0;j<grid[0].length;j++)
			{
				grid[i][j]=gridSolved[i][j];
			}
		}
		record=new ArrayList<Integer>();
		recordIndex=-1;
		refresh();
	}


	/**
	 * This method sets each value in grid[][] equal to the corresponding value in gridStart[][], 
	 * thus displaying the original randomized state of the board.
	 */
	public void reset() {
		for(int i=0;i<grid.length;i++)
		{
			for(int j=0;j<grid[0].length;j++)
			{
				grid[i][j]=gridStart[i][j];
			}
		}
		record=new ArrayList<Integer>();
		recordIndex=-1;
		refresh();
	}



	/**
	 * This method randomizes the board by shifting the blank space by one space in a random direction
	 * once for each of the rows times each of the columns times 100.
	 */
	public void randomize(){
		for(int i=0;i<grid[0].length*grid.length*100;i++){
			preShift(new Double(Math.random()*4+1).intValue());   //uses the shift method with a random input from 1 to 4
		}
	}
	
	
	
	/**
	 * This method moves the blank space over by one space in the specified direction.
	 * The refresh method is not called in this version of shift(), 
	 * so it can be used during the randomization process.
	 * The directions are as follows: 1=right 2=down 3=left and 4=up.
	 * 
	 * @param direction The direction in which to shift the blank space.
	 */
	public void preShift(int direction){
		if(direction==1&&blankx()<grid[0].length-1){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()][blankx()+1];
			grid[by][bx+1]=0;
			grid[by][bx]=temp;
		}
		else if(direction==2&&blanky()<grid.length-1){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()+1][blankx()];
			grid[by+1][bx]=0;
			grid[by][bx]=temp;
			}
		else if(direction==3&&blankx()>0){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()][blankx()-1];
			grid[by][bx-1]=0;
			grid[by][bx]=temp;
			}
		else if(direction==4&&blanky()>0){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()-1][blankx()];
			grid[by-1][bx]=0;
			grid[by][bx]=temp;
			}
	}
	
	
	/**
	 * This method functions exactly like the preShift(int) method, but it refreshes the board afterwards
	 * to update the gui display in accordance with the shift.
	 * 
	 * @param direction The direction in which to shift the blank space.
	 */
	public void shift(int direction){
		preShift(direction);
		refresh();
	}
	
	
	/**
	 * 
	 * @return The y position of the blank space.
	 */
	public int blanky(){
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]==0)return i;
			}
		}
		return -1;
	}
	
	
	/**
	 * 
	 * @return The x position of the blank space.
	 */
	public int blankx(){
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]==0)return j;
			}
		}
		return -1;
	}
	
	
	/**
	 * This method prints a string representation of grid[][] to the console.
	 * This is used to test other methods.
	 */
	public void printSelf(){
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				System.out.print(grid[i][j]+" ");
			}
			System.out.println();
		}
	}
	
	
	/**
	 * This method fills buttons[][] with new JButtons, each containing a FifteenListener.
	 * It also colors all odd and even buttons differently and applies Old English font.
	 */
	public void makeAndPlaceButtons(){
		for (int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				buttons[i][j]=new JButton(""+grid[i][j]);
			}
		}
		for (int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]%2==0)buttons[i][j].setBackground(Color.red);
				else buttons[i][j].setBackground(Color.white);
				if(grid[i][j]==0){buttons[i][j].setText(" "); buttons[i][j].setBackground(Color.GRAY);}
				buttons[i][j].setFont(new Font("Old English Text MT",0,24));
				interior.add(buttons[i][j]);
				buttons[i][j].addActionListener(new FifteenListener(this,i,j));
				//this.add
			}
		}
	}
	
	/**
	 * This method updates the text and color of the buttons in buttons[] to reflect the data in grid[][].
	 */
	public void refresh(){
		for (int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				buttons[i][j].setText(grid[i][j]+"");
				if(grid[i][j]%2==0)buttons[i][j].setBackground(Color.red);
				else buttons[i][j].setBackground(Color.white);
				if(grid[i][j]==0){buttons[i][j].setText(" "); buttons[i][j].setBackground(Color.GRAY);}
			}
		}
	}
	
	
	/**
	 * This method check to see if grid[][] matches gridSolved[][] (the puzzle is solved).
	 * If it does, this method creates a "You Win!" popup message.
	 */
	public void checkWin(){
		boolean check=true;
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]!=gridSolved[i][j])check=false;
				//else check=true;
			}
		}
		if(check){
			JOptionPane.showMessageDialog(this, "You Win!");
			buttons[blanky()][blankx()].setBackground(Color.green);
		}
	}
	
	
	/**
	 * This method records new shifts in, and updates, the record ArrayList.
	 * 
	 * @param i The direction (see preShift()) of the move to record.
	 */
	public void recordMove(int i)
	{
		if(recordIndex==record.size()-1){
		record.add(i);
		recordIndex++;
		}
		else {for(int j=recordIndex;j<record.size();j++){
			record.remove(record.size()-1);
		}
		record.add(i);
		recordIndex++;
		}
		
	}
	
	
	
	/**
	 * This method undoes the last shift() by using data from record and recordIndex, and then updates
	 * both accordingly.
	 */
	public void undo()
	{
		if(recordIndex>=0&&record.size()>0){
			
			if(record.get(recordIndex)==1){
				shift(3);
			}
			else if(record.get(recordIndex)==2){
				shift(4);
			}
			else if(record.get(recordIndex)==3){
				shift(1);
			}
			else if(record.get(recordIndex)==4){
				shift(2);
			}
			recordIndex-=1;
		}
	}
	
	
	/**
	 * This method undoes the last undo() by using data from record and recordIndex, and then updates
	 * both accordingly.
	 */
	public void redo()
	{
		if(recordIndex<record.size()-1&&record.size()>0){
		shift((record.get(recordIndex+1)));
		recordIndex+=1;
		}
	}
	
	
	/**
	 * This method creates a popup message to inform the user of an input error.
	 */
	public void printIOError()
	{
		JOptionPane.showMessageDialog(this, "Invalid input; use (whole) numbers only.");
	}
	
	
	/**
	 * This method creates a popup message to inform the user of an logic error 
	 * (integer input out of specified range).
	 */
	public void printLogicError()
	{
		JOptionPane.showMessageDialog(this, "Error; all board dimensions must be between 2 and 20");
	}
	
	
	/**
	 * This method creates a popup message displaying the credits.
	 */
	public void showCredits()
	{
		JOptionPane.showMessageDialog(this, "Designed by: Jared Hoffman. \nImplemented by: Jared Hoffman. \n"
				+ "Documented by: Jared Hoffman: C.S. major a Rose-Hulman Institute of Technology.");
	}

}
