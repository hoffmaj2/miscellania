import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
//import javax.swing.JLabel;

//import swingDemo.ColoredPanel;


public class FifteenFrame extends JFrame {

	public int[][] grid;//the board
	private int[][] gridSolved;//what the board looks like when solved
	private ArrayList<Integer> record=new ArrayList<Integer>(); //stores all player-caused shifts as integers to allow the player to undo and redo moves
	private JButton[][] buttons;
	private int recordIndex=0;
	private JPanel interior;
	private JButton resetButton;
	private JButton undoButton;
	private JButton redoButton;
	private JButton changeSizeButton;
	
	
	public FifteenFrame() {
		this(4,4);
	}
	
	
	
	public FifteenFrame(int rows,int cols) {
		grid=new int[rows][cols];
		gridSolved=new int[rows][cols];
		for(int i=0;i<rows;i++){
			for(int j=0;j<cols;j++){
				gridSolved[i][j]=i*grid[0].length+j+1;
				grid[i][j]=i*grid[0].length+j+1;
				if(i+j==rows+cols-2){gridSolved[i][j]=0;
				grid[i][j]=0;
				}
			}
		}
		//grid=gridSolved;
		randomize();
		this.setSize(new Dimension(800,600));
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("All Hail Lord Quetzelcuatl!");
		this.setLayout(new BorderLayout());
		buttons=new JButton[grid.length][grid[0].length];
		interior=new JPanel();
		interior.setLayout(new GridLayout(grid.length,grid[0].length));
		interior.setVisible(true);
		this.add(interior);
		makeAndPlaceButtons();
		this.setVisible(true);
		resetButton=new JButton("reset");
		undoButton=new JButton("undo");
		redoButton=new JButton("redo");
		changeSizeButton=new JButton("resize board");
		this.add(resetButton,BorderLayout.EAST);
		this.add(undoButton,BorderLayout.NORTH);
		this.add(redoButton,BorderLayout.SOUTH);
		this.add(changeSizeButton,BorderLayout.WEST);
		
	}

	
	
	public void randomize(){
		for(int i=0;i<grid[0].length*grid.length*100;i++){
			preShift(new Double(Math.random()*4+1).intValue());   //uses the shift method with a random input from 1 to 4
		}
	}
	
	
	
	//meant to shift the blank box over by one in the given direction 1=right 2=down 3=left 4=up
	public void preShift(int direction){
		if(direction==1&&blankx()<grid[0].length-1){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()][blankx()+1];
			grid[by][bx+1]=0;
			grid[by][bx]=temp;
		}
		else if(direction==2&&blanky()<grid.length-1){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()+1][blankx()];
			grid[by+1][bx]=0;
			grid[by][bx]=temp;
			}
		else if(direction==3&&blankx()>0){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()][blankx()-1];
			grid[by][bx-1]=0;
			grid[by][bx]=temp;
			}
		else if(direction==4&&blanky()>0){
			int by=blanky(); int bx=blankx();
			int temp=grid[blanky()-1][blankx()];
			grid[by-1][bx]=0;
			grid[by][bx]=temp;
			}
		//refresh();
	}
	
	
	
	public void shift(int direction){
		preShift(direction);
		refresh();
	}
	
	
	
	public int blanky(){
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]==0)return i;
			}
		}
		return -1;
	}
	
	
	
	public int blankx(){
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]==0)return j;
			}
		}
		return -1;
	}
	
	
	
	public void printSelf(){
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				System.out.print(grid[i][j]+" ");
			}
			System.out.println();
		}
	}
	
	
	
	public void makeAndPlaceButtons(){
		for (int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				buttons[i][j]=new JButton(""+grid[i][j]);
			}
		}
		for (int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]%2==0)buttons[i][j].setBackground(Color.red);
				else buttons[i][j].setBackground(Color.white);
				if(grid[i][j]==0){buttons[i][j].setText(" "); buttons[i][j].setBackground(Color.GRAY);}
				buttons[i][j].setFont(new Font("Old English Text MT",0,24));
				interior.add(buttons[i][j]);
				buttons[i][j].addActionListener(new FifteenListener(this,i,j));
				//this.add
			}
		}
	}
	
	
	public void refresh(){
		for (int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				buttons[i][j].setText(grid[i][j]+"");
				if(grid[i][j]%2==0)buttons[i][j].setBackground(Color.red);
				else buttons[i][j].setBackground(Color.white);
				if(grid[i][j]==0){buttons[i][j].setText(" "); buttons[i][j].setBackground(Color.GRAY);}
			}
		}
	}
	
	
	public void checkWin(){
		boolean check=true;
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[0].length;j++){
				if(grid[i][j]!=gridSolved[i][j])check=false;
				//else check=true;
			}
		}
		if(check){
			JOptionPane.showMessageDialog(this, "You Win!");
			buttons[blanky()][blankx()].setBackground(Color.green);
		}
	}
	
	
	public void recordMove(int i)
	{
		if(recordIndex==record.size()-1){
		record.add(i);
		recordIndex++;
		}
		else for(int j=recordIndex;j<record.size();j++){
			record.remove(record.size()-1);
		}
		
	}
	
	
	public void undo()
	{
		shift((record.get(recordIndex)+2)%4);
		recordIndex-=1;
	}
	
	
	public void redo()
	{
		shift((record.get(recordIndex)+2)%4);
		recordIndex+=1;
	}

}
